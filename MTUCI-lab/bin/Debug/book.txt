1.3. Протокол HTTP
Взаимодействие всех участников web-сети основывается на использовании протокола передачи гипертекстов – HTTP (HyperText Transfer Protocol). HTTP – это протокол прикладного уровня, в стеке
протоколов TCP/IP. Текущей версией данного протокола является
HTTP/1.1. По умолчанию используется порт 80.
С помощью протокола HTTP web-серверы и браузеры обмениваются
информацией, поэтому web-серверы также часто называют HTTPсерверами, а web-браузеры – HTTP-клиентами. Однако HTTP-клиентами
могут быть не только браузеры, но и любые программы, которые могут
использовать HTTP-протокол (прокси-серверы, поисковые агенты и т. п.).
Пример взаимодействия web-браузера и web-сервера с использованием
протокола HTTP показан на рис. 1.3. 
12
Рис. 1.3. Взаимодействие браузера и сервера по протоколу HTTP
Протокол HTTP использует принцип «запрос-ответ», означающий,
что программа HTTP-клиент посылает HTTP-серверу сообщение (команду) вида «HTTP-запрос» (request), а сервер возвращает сообщение
вида «HTTP-ответ» (response).
HTTP-запрос имеет следующую структуру:
МЕТОД /имя-ресурса [?параметры-запроса] HTTP/номер-версии
Имя-заголовка-1: значение
Имя-заголовка-2: значение
[тело запроса, которое может отсутствовать]
Первая строка запроса состоит из трех полей:
 первое поле – МЕТОД – соответствует одному из поддерживаемых методов запроса (например, GET или POST);
 второе поле – /имя-ресурса – соответствует части URL-адреса, которая задает на web-сервере путь к запрашиваемому ресурсу;
 третье поле – номер-версии – соответствует версии протокола
HTTP, который использует клиент (в настоящее время это 1.0 или 1.1).
После первой строки запроса записывается список HTTPзаголовков (headers), за которыми следует пустая строка (символы «возврат каретки и завершение строки», «\r\n», коды 13 и 10), которая отделяет заголовки запроса от тела запроса. После нее может быть (хотя и не
обязательно) тело запроса, после которого следует другая пустая строка,
указывающая на конец запроса.
Например, если запрашиваемым URL-адресом является
http://www.mywebsite.ru/~ivanov/defaut.html, то ниже показан упрощенный
вариант HTTP-запроса, который будет передан зарегистрированному в
DNS-системе web-сайту с именем www.mywebsite.ru: 
13
GET /~ivanov/defaut.html HTTP/1.1
Host: www.mywebsite.ru
При использовании метода GET в сообщении нет тела, поэтому запрос просто завершается пустой строкой. Отметим наличие заголовка
Host, в котором задается доменное имя используемого web-сайта.
Сервер при получении такого запроса будет формировать HTTPответ, который имеет следующую структуру:
HTTP/номер-версии код-состояния текстовое-пояснение
Имя-заголовка-1: значение
Имя-заголовка-2: значение
[тело ответа]
Первая строка ответа (строка состояния) содержит версию HTTPпротокола, за которой следует код состояния, состоящий из 3-х цифр, и
его краткое текстовое пояснение. Ниже показан пример HTTP-ответа, который может сформировать и отправить сервер, если запрашиваемый
файл существует, и тот, кто его запрашивает, имеет право доступа к нему.
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 9934
<HTML>
 <HEAD>
 <TITLE>Домашняя страница</TITLE>
 </HEAD>
 <BODY>
 <H2 align="center">Добро пожаловать на сайт Иванова И.П.</H2>
 . . .
 </BODY>
</HTML>
Так как переданный в данном примере HTTP-запрос был успешно
обработан, то строка состояния содержит код 200 и краткое его пояснение – OK. Отметим, что в HTTP-ответ включены две строки заголовков,
после которых идет пустая строка, за которой следует содержание запрашиваемого файла (тело ответа).
Процесс передачи запросов и ответов между браузерами и серверами не всегда является таким простым. Например, HTML-страница может
14
содержать ссылки на другие доступные ресурсы, которые связаны с ней
(изображения, скрипты, стили и т. п.). Клиенты, которые выполняют показ изображений, выполнение скриптов или используют стили для представления страниц, должны выполнить разбор полученной HTMLстраницы, чтобы определить, какие дополнительные ресурсы требуются
для правильного отображения данной страницы, а затем формируют новые HTTP-запросы на получение этих дополнительных ресурсов.
1.3.1. Методы запроса
В HTTP-протоколе определены такие методы запросов, как GET,
HEAD, PUT, DELETE, TRACE, OPTIONS и CONNECT. Наиболее часто используемыми методами являются GET и POST.
Метод GET
Метод GET является самым простым методом запроса. Он используется при формировании запроса к web-серверу, когда пользователь
вводит URL в адресную строку браузера, переходит по гиперссылке или
выбирает одну из закладок на ранее посещаемые страницы.
Кроме этого, метод GET будет использоваться при отправке данных HTML-формы (в результате нажатия клавиши типа submit), у которой задан атрибут «metod="GET"» (пример показан на рис. 1.4).
Рис. 1.4. Отображение HTML-формы в браузере (a)
и ее описание в странице (б)
В данной HTML-форме описано поле s, которому пользователь задает значение YHOO. В результате нажатия кнопки «Get Quote» будет
формироваться следующий HTTP-запрос:
GET /q?s=YHOO HTTP/1.1
Host: finance.yahoo.com
User-Agent: Mozilla/5.0 (Windows; U; Windows XP; en-US; rv:1.8.0.11)
Значение поля передается s в виде параметра ?s=YHOO. 
15
Метод POST
Основное отличие между методами GET и POST состоит в том, что
POST-запросы имеют тело: некоторое содержание, которое следует за
блоком заголовков и отделено от него пустой строкой.
Если в форме, показанной на рис. 1.4, изменить используемый метод на POST, т. е. metod="POST", то браузер сформирует следующий
HTTP-запрос, в котором передаваемые параметры (данные) формы будут записаны в теле запроса:
POST /q HTTP/1.1
Host: finance.yahoo.com
User-Agent: Mozilla/4.75 [en] (WinNT; U)
Content-Type: application/x-www-form-urlencoded
Content-Length: 6
s=YHOO
1.3.2. Коды состояния
Первой строкой HTTP-ответа является строка состояния, которая
включает имя протокола и его версии, после которых записывается
трехцифровой код состояния (результата обработки) и его краткое текстовое пояснение. Код состояния сообщает HTTP-клиенту (браузеру
или прокси-серверу), был ли запрос успешно обработан или требуется
выполнить некоторые дополнительные действия, которые могут быть
уточнены с помощью значений, включенных в сообщение заголовков.
В протоколе HTTP/1.1 определены пять категорий кодов состояний.
Информационные коды состояний (1xx) используются только в
поясняющих целях. Они не сообщают об успешном или неуспешном завершении обработки запроса сервером, а содержат информацию об их
последующих обработках.
Коды состояния об успешной обработке запроса (2хх) наиболее
часто имеют следующие значения:
 200 OK – обработка запроса была успешно выполнена и запрашиваемый ресурс был отправлен клиенту;
 201 Created – обработка запроса была успешно выполнена и в результате этого на сервере был создан новый ресурс (для запроса с методом PUT);
 204 No Content – обработка запроса была успешно выполнена, но
никакого содержания передавать не требуется. 